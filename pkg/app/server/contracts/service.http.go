// Code generated by protoc-gen-gohttp. DO NOT EDIT.
// source: proto/contracts/service.proto

package contracts

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	protojson "google.golang.org/protobuf/encoding/protojson"
	ioutil "io/ioutil"
	contracts "techunicorn.com/udc-core/gettingStarted/pkg/domain/contracts"
)

const InternalContextKey = "inCxt"

var protomarsh = protojson.MarshalOptions{EmitUnpopulated: true}

// Healthz
type HealthzHTTPServer interface {
	// Query for existing tasks
	GetHealthStatus(context.Context, *contracts.HealthQuery) (*contracts.EmptyResponse, error)
}
type healthz struct {
	app HealthzHTTPServer
}

// responds success if application running
func (p *healthz) getHealthStatus(ctx *gin.Context) {
	body := contracts.HealthQuery{}
	raw, err := ioutil.ReadAll(ctx.Request.Body)
	if err != nil {
		ctx.Error(err)
		return
	}
	protojson.Unmarshal(raw, &body)
	var c context.Context
	if v, ok := ctx.Get(InternalContextKey); ok {
		c, _ = v.(context.Context)
	}
	if c == nil {
		c = ctx
	}
	res, err := p.app.GetHealthStatus(
		c,
		&body,
	)
	if err != nil {
		ctx.Error(err)
		return
	}
	resraw, err := protomarsh.Marshal(res)
	if err != nil {
		ctx.Error(err)
		return
	}
	ctx.Status(200)
	ctx.Header("Content-Type", "application/json")
	_, err = ctx.Writer.Write(resraw)
	if err != nil {
		ctx.Error(err)
		return
	}
}
func RegisterHealthzHTTPServer(
	grp *gin.RouterGroup,
	srv HealthzHTTPServer,
) {
	ctrl := healthz{app: srv}
	grp.POST("/queries/health", ctrl.getHealthStatus)
}
